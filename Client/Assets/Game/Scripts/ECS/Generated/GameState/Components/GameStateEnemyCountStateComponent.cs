//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameStateContext {

    public GameStateEntity enemyCountStateEntity { get { return GetGroup(GameStateMatcher.EnemyCountState).GetSingleEntity(); } }
    public Lockstep.ECS.GameState.EnemyCountStateComponent enemyCountState { get { return enemyCountStateEntity.enemyCountState; } }
    public bool hasEnemyCountState { get { return enemyCountStateEntity != null; } }

    public GameStateEntity SetEnemyCountState(int newMaxEnemyCountInScene, int newTotalEnemyCountToBorn, int newCurEnemyCountInScene, int newRemainCountToBorn, Lockstep.Math.LFloat newBornTimer, Lockstep.Math.LFloat newBornInterval) {
        if (hasEnemyCountState) {
            throw new Entitas.EntitasException("Could not set EnemyCountState!\n" + this + " already has an entity with Lockstep.ECS.GameState.EnemyCountStateComponent!",
                "You should check if the context already has a enemyCountStateEntity before setting it or use context.ReplaceEnemyCountState().");
        }
        var entity = CreateEntity();
        entity.AddEnemyCountState(newMaxEnemyCountInScene, newTotalEnemyCountToBorn, newCurEnemyCountInScene, newRemainCountToBorn, newBornTimer, newBornInterval);
        return entity;
    }

    public void ReplaceEnemyCountState(int newMaxEnemyCountInScene, int newTotalEnemyCountToBorn, int newCurEnemyCountInScene, int newRemainCountToBorn, Lockstep.Math.LFloat newBornTimer, Lockstep.Math.LFloat newBornInterval) {
        var entity = enemyCountStateEntity;
        if (entity == null) {
            entity = SetEnemyCountState(newMaxEnemyCountInScene, newTotalEnemyCountToBorn, newCurEnemyCountInScene, newRemainCountToBorn, newBornTimer, newBornInterval);
        } else {
            entity.ReplaceEnemyCountState(newMaxEnemyCountInScene, newTotalEnemyCountToBorn, newCurEnemyCountInScene, newRemainCountToBorn, newBornTimer, newBornInterval);
        }
    }

    public void RemoveEnemyCountState() {
        enemyCountStateEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameStateEntity {

    public Lockstep.ECS.GameState.EnemyCountStateComponent enemyCountState { get { return (Lockstep.ECS.GameState.EnemyCountStateComponent)GetComponent(GameStateComponentsLookup.EnemyCountState); } }
    public bool hasEnemyCountState { get { return HasComponent(GameStateComponentsLookup.EnemyCountState); } }

    public void AddEnemyCountState(int newMaxEnemyCountInScene, int newTotalEnemyCountToBorn, int newCurEnemyCountInScene, int newRemainCountToBorn, Lockstep.Math.LFloat newBornTimer, Lockstep.Math.LFloat newBornInterval) {
        var index = GameStateComponentsLookup.EnemyCountState;
        var component = CreateComponent<Lockstep.ECS.GameState.EnemyCountStateComponent>(index);
        component.MaxEnemyCountInScene = newMaxEnemyCountInScene;
        component.TotalEnemyCountToBorn = newTotalEnemyCountToBorn;
        component.CurEnemyCountInScene = newCurEnemyCountInScene;
        component.RemainCountToBorn = newRemainCountToBorn;
        component.bornTimer = newBornTimer;
        component.bornInterval = newBornInterval;
        AddComponent(index, component);
    }

    public void ReplaceEnemyCountState(int newMaxEnemyCountInScene, int newTotalEnemyCountToBorn, int newCurEnemyCountInScene, int newRemainCountToBorn, Lockstep.Math.LFloat newBornTimer, Lockstep.Math.LFloat newBornInterval) {
        var index = GameStateComponentsLookup.EnemyCountState;
        var component = CreateComponent<Lockstep.ECS.GameState.EnemyCountStateComponent>(index);
        component.MaxEnemyCountInScene = newMaxEnemyCountInScene;
        component.TotalEnemyCountToBorn = newTotalEnemyCountToBorn;
        component.CurEnemyCountInScene = newCurEnemyCountInScene;
        component.RemainCountToBorn = newRemainCountToBorn;
        component.bornTimer = newBornTimer;
        component.bornInterval = newBornInterval;
        ReplaceComponent(index, component);
    }

    public void RemoveEnemyCountState() {
        RemoveComponent(GameStateComponentsLookup.EnemyCountState);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameStateMatcher {

    static Entitas.IMatcher<GameStateEntity> _matcherEnemyCountState;

    public static Entitas.IMatcher<GameStateEntity> EnemyCountState {
        get {
            if (_matcherEnemyCountState == null) {
                var matcher = (Entitas.Matcher<GameStateEntity>)Entitas.Matcher<GameStateEntity>.AllOf(GameStateComponentsLookup.EnemyCountState);
                matcher.componentNames = GameStateComponentsLookup.componentNames;
                _matcherEnemyCountState = matcher;
            }

            return _matcherEnemyCountState;
        }
    }
}
